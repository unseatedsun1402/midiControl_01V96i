##--------fader control--------##
def getbytes(self):
    values = bytearray
    level = input('Fader Value (0-1023)')
    level = int(level) % 1024
    dmod = divmod(level,128)
    byte1 = dmod[1]
    byte2 = dmod[0]
    values = [0x00,0x00,byte2,byte1]
    setFaderlvl(self,values)

def setFaderlvl(self,values):
    pygame.midi.init()
    bytes = bytearray
    bytes = [0xF0,0x43,0x10,0x3E,0x7F,0x01,0x1C,0x00,self.cc,values[0],values[1],values[2],values[3],0xF7]
    print(bytes)
    try:
        connection.output.write_sys_ex(msg= bytes,when= pygame.midi.time())
    except(pygame.midi.MidiException):
        print('failed')

def getFaderlvl(self):
    bytes = bytearray
    bytes = [0xF0,0x43,0x30,0x3E,0x7F,0x01,0x1C,0x00,self.cc,0xF7]
    connection.output.write_sys_ex(msg= bytes,when= pygame.midi.time())
    time.sleep(0.05)
    message = []
    reading = False
    for event in connection.input.read(256):
        for byte in event[0]:
            if byte == 0xf0:
                if not reading:
                    message = [event[0][0]]
                    reading = True
            elif byte == 0xf7 and reading:
                if len(message) > 12:
                    print(message)
                reading = False
            elif reading:
                    message.append(byte)


##-------select main input device--------##
def input_main(device_id=None):
    pg.init()

    pygame.midi.init()

    _print_device_info()

    if device_id is None:
        input_id = pygame.midi.get_default_input_id()
    else:
        input_id = device_id

    print(f"using input_id :{input_id}:")
    i = pygame.midi.Input(input_id)

    pg.display.set_mode((1, 1))

    going = True
    while going:
        events = pygame.event.get()
        for e in events:
            if e.type in [pg.QUIT]:
                going = False
            if e.type in [pg.KEYDOWN]:
                going = False
            if e.type in [pygame.midi.MIDIIN]:
                print(e)

        if i.poll():
            midi_events = i.read(10)
            # convert them into pygame events.
            midi_evs = pygame.midi.midis2events(midi_events, i.device_id)

            for m_e in midi_evs:
                pygame.event.post(m_e)

    del i
    pygame.midi.quit()


##--------main output device selection--------##
    '''def output_main(device_id=None):
        pg.init()
        pygame.midi.init()

        _print_device_info()

        if device_id is None:
            port = pygame.midi.get_default_output_id()
        else:
            port = device_id

        print(f"using output_id :{port}:")
        midi_out = pygame.midi.Output(port, 0)'''